// Tailwind config

import { getAllColors } from "./theme.js";
import fs from "fs";

/**
 * @param {import("./theme").Themes} themes
 *
 * @returns What goes in the `colors` field of the tailwind config. eg:
 *
export default {
  content: [],
  theme: {
    colors: <HERE>,
  },
  plugins: [],
}
 */
export function generateTailwindConfigColors(themes) {
  const colors = getAllColors(themes);

  return Object.fromEntries(
    colors.map((x) => {
      return [x, `rgba(var(--${x}))`];
    }),
  );
}

// CSS

const INDENT = "    ";

/**
 * @param {import("./theme").Themes} themes
 *
 * @returns {string}
 */
export function generateCss(themes) {
  /** @type {string[]} */
  const strings = [];
  strings.push("/*\n");
  strings.push(
    ` * IMPORTANT: This file is automatically generated by tailwind-themer\n`,
  );
  strings.push(
    ` * If you want to adjust this file please adjust the theme.yaml file\n`,
  );
  strings.push(" */\n\n");

  strings.push(
    `@tailwind base;
@tailwind components;
@tailwind utilities;\n\n`,
  );
  for (const theme of themes.themes) {
    strings.push(`.${theme.name} {\n`);
    strings.push(genThemeCss(theme));
    strings.push(`}\n\n`);
  }

  strings.push(":root {\n");
  strings.push(`${INDENT}@apply .${themes.defaultLightTheme};\n`);
  strings.push("}\n\n");

  if (themes.defaultDarkTheme !== null) {
    strings.push("@media (prefers-color-scheme: dark) {\n");
    strings.push(`${INDENT}:root {\n`);
    strings.push(`${INDENT}${INDENT}@apply .${themes.defaultDarkTheme};\n`);
    strings.push(`${INDENT}}\n}\n\n`);
  }

  return strings.join("");
}

/**
 * @param {import("./theme").Theme} theme
 * @returns {string}
 */
function genThemeCss(theme) {
  const strings = [];

  strings.push(`${INDENT}color-scheme: ${theme.colorScheme};\n`);

  for (const color of theme.colors) {
    strings.push(INDENT + genThemeColorCss(color));
  }

  return strings.join("");
}

/**
 * @param {import("./theme").ThemeColor} themeCol
 * @returns {string}
 */
function genThemeColorCss(themeCol) {
  const [r, g, b] = themeCol.color.rgb();
  return `--${themeCol.name}: ${r}, ${g}, ${b};\n`;
}

// Javascript

export function generateJavascriptCode(output) {
  fs.writeFileSync(output, JAVASCRIPT_CODE, "utf-8");
  console.log("Generated theme.js code file!");
}

const JAVASCRIPT_CODE = `
/*
 * IMPORTANT: This code is generated with \`tailwind-themer js-template\`
 * You can makes changes to this file but be careful not to run the command again
 */

const THEME_KEY = "theme";

/**
 * @returns {string | null} The currently selected theme, null if none is selected
 */
function getTheme() {
  return localStorage.getItem(THEME_KEY);
}

/**
 * Sets the theme, null = set the browser decide
 * @param {string | null} theme 
 */
function setTheme(theme) {
  if (theme === null) {
    localStorage.removeItem(THEME_KEY);
    document.body.className = "";
    return;
  }
  localStorage.setItem(THEME_KEY, theme);
  document.body.className = theme;
}

// Set the theme on load
document.addEventListener("load", () => {
  setTheme(getTheme());
});
`;
